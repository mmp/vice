name: build-windows

on:
  push:
    paths-ignore:
      - 'website/**'
      - '**.md'
  pull_request:
    paths-ignore:
      - 'website/**'
      - '**.md'

jobs:
  build:
    strategy:
      fail-fast: false
      matrix:
        os: [ windows-latest ]

    name: Build ${{ matrix.os }}

    runs-on: ${{ matrix.os }}

    steps:
    - name: Checkout source
      uses: actions/checkout@v4
      with:
        fetch-depth: 0   # fetch whole history so we can get tags for the installer :-(
        submodules: true

    - name: Check git tags
      run: |
        git describe --tags --abbrev=8 --dirty --always --long
        git describe --tags --abbrev=0

    - name: Setup go
      uses: actions/setup-go@v5
      with:
        go-version-file: go.mod
        cache-dependency-path: go.sum

    - name: Checkout Windows prebuilts
      uses: actions/checkout@v4
      with:
        repository: mmp/vice-windows-ext
        path: ./ext

    - name: Install windows prebuilts
      working-directory: ./ext
      run: |
        unzip -q SDL2-devel-2.24.0-mingw.zip
        7z x x86_64-12.2.0-release-win32-seh-rt_v10-rev0.7z -omingw
        echo ${{ github.workspace }}/ext/mingw/mingw64 >> $GITHUB_PATH
        ls

    - name: Prepare icon resources
      run: |
        go install github.com/tc-hib/go-winres@latest
        go-winres make --in windows/winres.json --out cmd/vice/rsrc

    - name: Build whisper-cpp
      shell: bash
      run: |
        cmake -S whisper.cpp -B whisper.cpp/build_go \
          -G "MinGW Makefiles" \
          -DBUILD_SHARED_LIBS=OFF \
          -DGGML_CPU=ON \
          -DGGML_OPENMP=OFF \
          -DCMAKE_BUILD_TYPE=Release \
          -DCMAKE_C_FLAGS="-D_WIN32_WINNT=0x0601 -DWINVER=0x0601" \
          -DCMAKE_CXX_FLAGS="-D_WIN32_WINNT=0x0601 -DWINVER=0x0601"
        cmake --build whisper.cpp/build_go --parallel 4
        ls -l whisper.cpp/build_go/src/libwhisper.a
        mkdir -p whisper.cpp/build_go/ggml/src
        for base in ggml ggml-base ggml-cpu; do
          if [ ! -f "whisper.cpp/build_go/ggml/src/lib${base}.a" ]; then
            found=$(find whisper.cpp/build_go -type f \( -name "${base}.a" -o -name "lib${base}.a" \) | head -n1 || true)
            if [ -n "$found" ]; then
              cp -f "$found" "whisper.cpp/build_go/ggml/src/lib${base}.a"
            fi
          fi
        done
        ls -l whisper.cpp/build_go/ggml/src || true

    - name: Build for lint (local resources)
      run: |
        git describe --tags --abbrev=8 --dirty --always --long > resources/version.txt
        go build -tags static -ldflags="-s -w -H=windowsgui" -o ./vice.exe ./cmd/vice
        ls
      env:
        CGO_CFLAGS: "-I ../ext/SDL2-2.24.0/x86_64-w64-mingw32/include"
        CGO_CPPFLAGS: "-I ../ext/SDL2-2.24.0/x86_64-w64-mingw32/include"
        CGO_LDFLAGS: "-L ../ext/SDL2-2.24.0/x86_64-w64-mingw32/lib"

    - name: Check scenarios
      run: ./vice.exe -lint

    - name: Bundle resources
      env:
         VICE_GCS_CREDENTIALS: ${{ secrets.GCS_UPLOAD_CREDENTIALS }}
      shell: bash
      run: |
        if [ -z "${{ secrets.GCS_UPLOAD_CREDENTIALS }}" ]; then
            touch cmd/vice/manifest.json
        else
            go run ./cmd/bundleresources
            mv manifest.json cmd/vice
        fi

    - name: Build for release (download resources)
      run: |
        git describe --tags --abbrev=8 --dirty --always --long > resources/version.txt
        go build -tags static,downloadresources -ldflags="-s -w -H=windowsgui" -o ./vice.exe ./cmd/vice
        go build -o ./crc2vice.exe ./cmd/crc2vice
        go build -o ./dat2vice.exe ./cmd/dat2vice
        ls
      env:
        CGO_CFLAGS: "-I ../ext/SDL2-2.24.0/x86_64-w64-mingw32/include"
        CGO_CPPFLAGS: "-I ../ext/SDL2-2.24.0/x86_64-w64-mingw32/include"
        CGO_LDFLAGS: "-L ../ext/SDL2-2.24.0/x86_64-w64-mingw32/lib"

    - name: Add WIX to path
      run: echo "C:\Program Files (x86)\WiX Toolset v3.14\bin" >> $GITHUB_PATH
      shell: bash

    - name: Create installer
      run: |
        .\windows\makeinstaller.bat

    - name: Save executable
      uses: actions/upload-artifact@v4
      with:
        name: vice.exe
        path: vice.exe

    - name: Save installer
      uses: actions/upload-artifact@v4
      with:
        name: Vice-installer.msi
        path: Vice-installer.msi

    - name: Rename installer for release (maybe)
      if: startsWith(github.ref, 'refs/tags/')
      run: move Vice-installer.msi 'Vice-${{ github.ref_name }}-installer.msi'

    - name: Upload release (maybe)
      if: startsWith(github.ref, 'refs/tags/')
      uses: softprops/action-gh-release@v1
      with:
        files: |
          'Vice-${{ github.ref_name }}-installer.msi'
          dat2vice.exe
          crc2vice.exe

